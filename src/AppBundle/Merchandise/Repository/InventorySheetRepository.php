<?php

namespace AppBundle\Merchandise\Repository;

use AppBundle\Merchandise\Entity\InventorySheet;
use AppBundle\Merchandise\Entity\Restaurant;
use AppBundle\Merchandise\Entity\SheetModel;
use AppBundle\ToolBox\Utils\DateUtilities;
use AppBundle\ToolBox\Utils\Utilities;

/**
 * InventoriesSheetsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InventorySheetRepository extends \Doctrine\ORM\EntityRepository
{
    public function getInventorySheetsCount(Restaurant $restaurant = null)
    {
        $qb = $this->_em->getRepository('Merchandise:InventorySheet')
            ->createQueryBuilder('inventorySheet')
            ->select('COUNT(inventorySheet)');
        if ($restaurant != null) {
            $qb->andWhere("inventorySheet.originRestaurant = :restaurant")
                ->setParameter("restaurant", $restaurant);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getCreatedTodayInventorySheetsCount()
    {
        $qb = $this->_em->getRepository('Merchandise:InventorySheet')
            ->createQueryBuilder('inventorySheet')
            ->where('inventorySheet.createdAt = :today')
            ->setParameter('today', date('Y-m-d', time()))
            ->select('COUNT(inventorySheet)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getInventorySheets(
        $search,
        $order,
        $start = 0,
        $length = null,
        $types = [],
        $statusList = [],
        $getResult = true
    ) {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('inventorySheet')->from(
            'Merchandise:InventorySheet',
            'inventorySheet'
        );

        // searching
        if ($search) {
            if (is_numeric($search)) {
                $qb->where('inventorySheet.id = :id')
                    ->setParameter('id', $search);
            }
            $qb->orWhere('inventorySheet.status IN (:statusList)')
                ->setParameter('statusList', $statusList);
            $qb->orWhere('inventorySheet.type IN (:types)')
                ->setParameter('types', $types);
            if (DateUtilities::validateDate($search)) {
                $qb->orWhere('inventorySheet.fiscalDate = :queryDate')
                    ->setParameter('queryDate', new \DateTime($search));
            }
        }

        // ordering
        if ($order) {
            if (intval($order[0]['column']) == 0) {
                $qb->orderBy('inventorySheet.id', $order[0]['dir']);
            } else {
                if (intval($order[0]['column']) == 1) {
                    $qb->orderBy('inventorySheet.fiscalDate', $order[0]['dir']);
                }
            }
        }

        if ($length) {
            $preparedQuery = $qb->getQuery()->setMaxResults($length)
                ->setFirstResult($start);
        } else {
            $preparedQuery = $qb->getQuery();
        }

        return $getResult ? $preparedQuery->getArrayResult() : $preparedQuery;
    }

    public function getCreatedTodayInventorySheets(
        $restaurant,
        $search,
        $criteria,
        $order,
        $start = 0,
        $length = null,
        $types = [],
        $statusList = [],
        $getResult = true
    ) {


        $qb = $this->_em->createQueryBuilder();

        $qb->select('inventorySheet', 'sheetModel')->from('Merchandise:InventorySheet', 'inventorySheet')
            ->leftJoin('inventorySheet.sheetModel', 'sheetModel');


        if($restaurant){
            $qb->andWhere('inventorySheet.originRestaurant=:restaurant')
                ->setParameter('restaurant',$restaurant);
        }

        // searching
        if ($search) {
            if (is_numeric($search)) {
                $qb->orWhere('inventorySheet.id = :id')
                    ->setParameter('id', $search);
            }
            $qb->orWhere('inventorySheet.status IN (:statusList)')
                ->setParameter('statusList', $statusList);
            $qb->orWhere('inventorySheet.type IN (:types)')
                ->setParameter('types', $types);
            if (DateUtilities::validateDate($search)) {
                $qb->orWhere('inventorySheet.fiscalDate = :queryDate')
                    ->setParameter('queryDate', new \DateTime($search));
            }
        }


        if ($criteria != null && is_array($criteria) && count($criteria) > 0) {
            if (Utilities::exist($criteria, 'inventory_search[startDate')
                && Utilities::exist($criteria, 'inventory_search[endDate')
            ) {
                $startDate = \DateTime::createFromFormat(
                    'd/m/Y',
                    $criteria['inventory_search[startDate']
                );
                $startDate = $startDate->format('Y-m-d');
                $endDate = \DateTime::createFromFormat(
                    'd/m/Y',
                    $criteria['inventory_search[endDate']
                );
                $endDate = $endDate->format('Y-m-d');
                $from = new \DateTime($startDate." 00:00:00");
                $to = new \DateTime($endDate." 23:59:59");
                $qb->andWhere('inventorySheet.createdAt BETWEEN :from AND :to ')
                    ->setParameter('from', $from)
                    ->setParameter('to', $to);

            }


        }


        // ordering
        if ($order) {
            if (intval($order[0]['column']) === 0) {
                $qb->addOrderBy(
                    'inventorySheet.id',
                    strtoupper($order[0]['dir'])
                );
            } else {
                if (intval($order[0]['column']) === 1) {
                    $qb->addOrderBy(
                        'inventorySheet.createdAt',
                        strtoupper($order[0]['dir'])
                    );
                } else {
                    if (intval($order[0]['column']) === 2) {
                        $qb->addOrderBy(
                            'inventorySheet.fiscalDate',
                            strtoupper($order[0]['dir'])
                        );
                    } else {
                        if (intval($order[0]['column']) === 3) {
                            $qb->addOrderBy(
                                'sheetModel.label',
                                strtoupper($order[0]['dir'])
                            );
                        }
                    }
                }
            }
        }

        if ($length) {
            $preparedQuery = $qb->getQuery()->setMaxResults($length)
                ->setFirstResult($start);
        } else {
            $preparedQuery = $qb->getQuery();
        }


        return $getResult ? $preparedQuery->getArrayResult() : $preparedQuery;
    }
}
