<?php

namespace AppBundle\Merchandise\Repository;

use AppBundle\Merchandise\Entity\ProductSold;
use AppBundle\ToolBox\Utils\Utilities;
use Doctrine\ORM\Query;
use Gedmo\Translatable\TranslatableListener;
use AppBundle\Supervision\Entity\ProductSoldSupervision;
/**
 * ProductSoldRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductSoldRepository extends \Doctrine\ORM\EntityRepository
{

    public function getProductsSoldCount()
    {
        $qb = $this->_em->getRepository('Merchandise:ProductSold')->createQueryBuilder('productSold')
            ->select('COUNT(productSold)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getFiltredProductsSoldCount($criteria, $getResult = true)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('COUNT(productSold)')->from('Merchandise:ProductSold', 'productSold');
        // searching
        if (count($criteria) > 0) {
            $value = $criteria['value'];
            $qb->where("lower(productSold.name) LIKE :search")
                ->orWhere("productSold.codePlu LIKE :search")
                ->setParameter('search', "%".strtolower($value)."%");
        }
        $preparedQuery = $qb->getQuery();

        return $getResult ? $preparedQuery->getSingleScalarResult() : $preparedQuery;
    }

    public function getProductsSold($criteria, $order, $offset, $limit, $getResult = true)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('productSold')->from('Merchandise:ProductSold', 'productSold');

        // searching
        if (count($criteria) > 0) {
            $value = $criteria['value'];
            $qb->where("lower(productSold.name) LIKE :search")
                ->orWhere("lower(productSold.codePlu) LIKE :search")
                ->setParameter('search', "%".strtolower($value)."%");
        }

        // ordering
        if (count($order)) {
            switch ($order[0]['column']) {
                case 0:
                    $qb->orderBy('productSold.codePlu', $order[0]['dir']);
                    break;
                case 1:
                    $qb->orderBy('productSold.name', $order[0]['dir']);
                    break;
                case 2:
                    $qb->orderBy('productSold.type', $order[0]['dir']);
                    break;
                case 3:
                    $qb->orderBy('productSold.active', $order[0]['dir']);
                    break;
            }
        }

        if (!is_null($offset) && !is_null($limit)) {
            $preparedQuery = $qb->getQuery()->setFirstResult(intval($offset))->setMaxResults(intval($limit));
        } else {
            $preparedQuery = $qb->getQuery();
        }

        return $getResult ? $preparedQuery->getArrayResult() : $preparedQuery;
    }


    /**
     * Filter by category id if not null
     *
     * @param  null $searchArray
     * @param  null $filters
     * @return array
     */
    public function findProduct($restaurant, $searchArray = null, $filters = null, $onlyActiveProduct = false)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('p')->from('Merchandise:ProductSold', 'p')->leftJoin('p.division', 'c');
        $conditions = [];
        if ($onlyActiveProduct) {
            $conditions[] = $qb->expr()->eq('p.active', "TRUE");
        }
        if (!is_null($searchArray)) {
            if (array_key_exists('term', $searchArray)) {
                $term = $searchArray['term'];
                $conditions[] = $qb->expr()->orX()->addMultiple(
                    [
                        $qb->expr()->like('UPPER(p.name)', "'%".strtoupper($term)."%'"),
                        $qb->expr()->like('UPPER(p.codePlu)', "'%".strtoupper($term)."%'"),
                    ]
                );
            }
            if (array_key_exists('code', $searchArray)) {
                $code = $searchArray['code'];
                $conditions[] = $qb->expr()->orX()->addMultiple(
                    [
                        $qb->expr()->like('UPPER(p.name)', "'%".strtoupper($code)."%'"),
                        $qb->expr()->like('UPPER(p.codePlu)', "'%".strtoupper($code)."%'"),
                    ]
                );
            }
        }
        if (!is_null($filters) && array_key_exists('categoryId', $filters)) {
            $categoryId = $filters['categoryId'];
            $conditions[] = $qb->expr()->orX()->addMultiple(
                [
                    $qb->expr()->eq('c.id = :categoryId', $categoryId),
                ]
            );
        }
        $conditions = call_user_func_array([$qb->expr(), 'andx'], $conditions);
        $qb->where($conditions);

        if(!array_key_exists("locale",$filters)){
            $locale='fr';
        }else{
            $locale=$filters['locale'];
        }

        $qb->andWhere('p.originRestaurant=:restaurant')->setParameter('restaurant', $restaurant);
        $query=$qb->getQuery();
        $query->setHint(Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker');
        $query->setHint(TranslatableListener::HINT_TRANSLATABLE_LOCALE, $locale);
        return $this->convertArrayOfProductsToSimpleArray($query->getResult());
    }

    private function convertArrayOfProductsToSimpleArray($array)
    {
        $result = [];
        foreach ($array as $product) {
            /**
             * @var $product ProductSold
             */
            $temp = [
                "id" => $product->getId(),
                "name" => $product->getName(),
                "codePlu" => $product->getCodePlu(),
                "soldingCanalsId" => $product->getSoldingCanalsIds(),
                "isTransformedProduct" => $product->isTransformedProduct(),
            ];

            $result[] = $temp;
        }

        return $result;
    }

    // TODO marwen: use magic function instead since we eager load that
    public function getProductSoldById($productSoldId)
    {
        $result = null;
        try {
            $result = $this->_em->find('Merchandise:ProductSold', $productSoldId);
        } catch (\Exception $e) {
        }

        return $result;
    }

    public function findAllOrderByPlu()
    {
        $queryBuilder = $this->createQueryBuilder('ps');

        $queryBuilder->orderBy('ps.codePlu');

        $result = $queryBuilder->getQuery()->getResult();

        return $result;
    }

    public function retrieveAllPlus($currentRestaurant)
    {
        $queryBuilder = $this->createQueryBuilder('ps')
            ->where("ps.originRestaurant = :restaurant")
            ->setParameter("restaurant", $currentRestaurant);

        $queryBuilder->select("ps.codePlu")
            ->groupBy('ps.codePlu');

        $result = $queryBuilder->getQuery()->getScalarResult();
        $result = array_map('current', $result);

        return $result;
    }

    /**
     * @return ProductSold[]
     */
    public function getProductSoldWithTicket()
    {

        $dql = "SELECT p FROM Merchandise:ProductSold p  WHERE  p.codePlu IN ( SELECT t.plu FROM Financial:TicketLine t )";

        return $this->_em->createQuery($dql)->getResult();
    }

    public function getProductsSoldOrdered($criteria, $order, $offset, $limit, $onlyList = false)
    {

        $queryBuilder = $this->createQueryBuilder('i');

        if (!$onlyList) {
            $qb1 = clone $queryBuilder;
            $total = $qb1->select('count(i)')
                ->where('i.originRestaurant=:restaurant')->setParameter('restaurant', $criteria['restaurant'])
                ->getQuery()->getSingleScalarResult();
        }

        //filtering
        if ($criteria !== null && is_array($criteria) && count($criteria) > 0) {
            if (Utilities::exist($criteria, 'product_sold_search[nameSearch')) {
                $queryBuilder->andWhere("lower(i.name) LIKE :name ")
                    ->setParameter("name", "%".strtolower($criteria['product_sold_search[nameSearch'])."%");
            }

            if (Utilities::exist($criteria, 'product_sold_search[statusSearch')) {
                $queryBuilder->andWhere("i.active = :active ")
                    ->setParameter("active", $criteria['product_sold_search[statusSearch'] == 0 ? false : true);
            }

            if (Utilities::exist($criteria, 'product_sold_search[typeSearch')) {
                $queryBuilder->andWhere("i.type = :type ")
                    ->setParameter("type", $criteria['product_sold_search[typeSearch']);
            }

            if (Utilities::exist($criteria, 'product_sold_search[codeSearch')) {
                $queryBuilder->andWhere("lower(i.codePlu) LIKE :codePlu ")
                    ->setParameter("codePlu", "%".strtolower($criteria['product_sold_search[codeSearch'])."%");
            }

            if (Utilities::exist($criteria, 'search')) {
                $queryBuilder->andWhere("lower(i.codePlu) LIKE :search or lower(i.name) LIKE :search")
                    ->setParameter("search", "%".strtolower($criteria['search'])."%");
            }

            if (isset($criteria['restaurant'])) {
                $queryBuilder->andWhere('i.originRestaurant=:restaurant')->setParameter(
                    'restaurant',
                    $criteria['restaurant']
                );
            }
        }

        if (!$onlyList) {
            $qb2 = clone $queryBuilder;
            $filtredTotal = $qb2->select('count(i)')
                ->getQuery()->getSingleScalarResult();
        }

        //ordering
        if ($order !== null && is_array($order) && count($order) > 0) {
            if (Utilities::exist($order, 'col')) {
                if (Utilities::exist($order, 'dir')) {
                    $orderDir = $order['dir'];
                } else {
                    $orderDir = 'asc';
                }
                switch ($order['col']) {
                    case 'codePlu':
                        $queryBuilder->orderBy('i.codePlu', $orderDir);
                        break;
                    case 'name':
                        $queryBuilder->orderBy('i.name', $orderDir);
                        break;
                    case 'type':
                        $queryBuilder->orderBy('i.type', $orderDir);
                        break;
                    case 'active':
                        $queryBuilder->orderBy('i.active', $orderDir);
                        break;
                }
            }
        }
        if ($limit !== null) {
            $queryBuilder->setMaxResults(intval($limit));
        }

        if ($offset !== null) {
            $queryBuilder->setFirstResult(intval($offset));
        }
        $query=$queryBuilder->getQuery();
        $query->setHint(Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker');
        if (!array_key_exists('locale', $criteria)) {
            $locale='fr';
        }else{
            $locale=$criteria['locale'];
        }
        $query->setHint(TranslatableListener::HINT_TRANSLATABLE_LOCALE, $locale);

        if ($onlyList) {
            return $query->getResult();
        } else {
            return array(
                'list' => $query->getResult(),
                'total' => $total,
                'filtred' => $filtredTotal,
            );
        }
    }

    public function findProductSupervision($searchArray = null, $filters = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('p.id', 'p.name', 'p.externalId')->from('Merchandise:ProductSold', 'p')->leftJoin(
            'p.division',
            'c'
        );
        $qb->where('1 = 1');

        if (!is_null($searchArray)) {
            if (array_key_exists('term', $searchArray)) {
                $term = $searchArray['term'];
                $qb->andWhere('UPPER(p.name) LIKE :term');
                $qb->setParameter(
                    'term',
                    strtoupper($term)."%"
                );
            }
            if (array_key_exists('code', $searchArray)) {
                $code = $searchArray['code'];
                $qb->andWhere('p.externalId LIKE :code');
                $qb->setParameter(
                    'code',
                    "$code%"
                );
            }
        }

        if (!is_null($filters) && array_key_exists('categoryId', $filters)) {
            $categoryId = $filters['categoryId'];
            $qb->andWhere('c.id = :categoryId')->setParameter(
                'categoryId',
                $categoryId
            );
        }

        return $qb->getQuery()->getArrayResult();
    }

   public function checkIfRestaurantsHaveAlreadyProductWithThisPlu(ProductSoldSupervision $productSold, $plu)	
    {	
      try {	
            $restaurants = $productSold->getRestaurants();	
            $restaurantsIds = [];	
            if (count($restaurants)) {	
                foreach ($restaurants as $restaurant) {	
                    /**	
                     * @var Restaurant $restaurant	
                     */	
                    $restaurantsIds[] = $restaurant->getId();	
                }	
                $qb = $this->_em->getRepository(ProductSold::class)	
                    ->createQueryBuilder('productSold')	
                    ->select('productSold.codePlu')	
                    ->where('productSold.active = :active')	
                    ->andWhere('productSold.originRestaurant in (:restaurants)')	
                    ->andWhere('productSold.codePlu = :plu')	
                    ->setParameter('restaurants', $restaurantsIds)	
                    ->setParameter('active', true)	
                    ->setParameter('plu', $plu);	
                $plus = $qb->getQuery()->getResult();	
                $plus = array_map('current', $plus);	
                $plus = array_unique($plus);	
                return in_array($plu, $plus);	
            } else {	
                return false;	
            }	
        } catch (\Exception $e) {	
            throw $e;	
        }	
    }
}
