<?php

namespace AppBundle\Merchandise\Repository\SheetModel;

/**
 * InventoriesSheetsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SheetModelRepository extends \Doctrine\ORM\EntityRepository
{
    public function getSheetsCount($restaurant, $type = null)
    {
        $qb = $this->_em->getRepository('Merchandise:SheetModel')->createQueryBuilder('sheetModel')
            ->select('COUNT(sheetModel)');
        if (!is_null($type)) {
            $qb->where('sheetModel.type = :type')
                ->andWhere('sheetModel.originRestaurant= :restaurant')
                ->setParameters(array('type' => $type, 'restaurant' => $restaurant));
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getSheets($restaurant, $search, $order, $start = 0, $length = null, $type = null, $getResult = true)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('sheetModel')->from('Merchandise:SheetModel', 'sheetModel')
            ->where('sheetModel.originRestaurant=:restaurant')
            ->setParameter('restaurant', $restaurant);

        if (!is_null($type)) {
            $qb->andWhere("sheetModel.type LIKE :type")->setParameter('type', $type);
        }
        // searching
        if (!is_null($search) && !empty($search)) {
            $qb->andWhere('sheetModel.label LIKE :query')
                ->setParameter('query', $search."%");
        }

        // ordering
        if ($order) {
            if ($order[0]['column'] == 0) {
                $qb->orderBy('sheetModel.id', $order[0]['dir']);
            } else {
                if ($order[0]['column'] == 1) {
                    $qb->orderBy('sheetModel.label', $order[0]['dir']);
                }
            }
        }

        if ($length) {
            $preparedQuery = $qb->getQuery()->setMaxResults($length)->setFirstResult($start);
        } else {
            $preparedQuery = $qb->getQuery();
        }

        return $getResult ? $preparedQuery->getArrayResult() : $preparedQuery;
    }
}
