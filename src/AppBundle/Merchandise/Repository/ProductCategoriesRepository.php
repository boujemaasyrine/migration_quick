<?php

namespace AppBundle\Merchandise\Repository;
use AppBundle\Supervision\Utils\Utilities;
use Doctrine\ORM\Query\Expr\Join;

/**
 * ProductCategoriesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductCategoriesRepository extends \Doctrine\ORM\EntityRepository
{
    public function getArrayOfCategoryNamesWithIdByTerm($term)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('c.id', 'c.name')->from('Merchandise:ProductCategories', 'c');
        $result = $qb->where('UPPER(c.name) LIKE :term')
            ->setParameters(
                [
                    'term' => strtoupper($term)."%",
                ]
            )
            ->getQuery()
            ->getArrayResult();

        return $result;
    }

    public function findCategoriesBySupplierAndRestaurant($supplier, $restaurant)
    {
        $queryBuilder = $this->createQueryBuilder('c');
        $queryBuilder->leftJoin('c.products', 'p');
        $queryBuilder->leftJoin('p.suppliers', 's');
        $queryBuilder->andWhere('s = :supplier')
            ->andWhere('p.originRestaurant = :restaurant')
            ->setParameters(
                array(
                    "supplier" => $supplier,
                    "restaurant" => $restaurant,
                )
            );

        return $queryBuilder->getQuery()->getResult();
    }

    public function getCategoriesOrdered($criteria, $order, $offset, $limit)
    {

        $queryBuilder = $this->createQueryBuilder('c');
        $queryBuilder->join('c.categoryGroup', 'g', Join::WITH);

        $queryBuilder->andWhere('c.active = :true')
            ->setParameter('true', true);

        if ($order !== null && is_array($order) && count($order) > 0) {
            if (Utilities::exist($order, 'col')) {

                if (Utilities::exist($order, 'dir')) {
                    $orderDir = $order['dir'];
                } else {
                    $orderDir = 'asc';
                }
                switch ($order['col']) {
                    case 'name' :
                        $queryBuilder->orderBy('c.name', $orderDir);
                        break;
                    case 'group' :
                        $queryBuilder->orderBy('c.categoryGroup.name', $orderDir);
                        break;
                    case 'taxBe' :
                        $queryBuilder->orderBy('c.taxBe', $orderDir);
                        break;
                    case 'taxLux' :
                        $queryBuilder->orderBy('c.taxLux', $orderDir);
                        break;
                }
            }
        }

        if ($limit !== null) {
            $queryBuilder->setMaxResults(intval($limit));
        }

        if ($offset !== null) {
            $queryBuilder->setFirstResult(intval($offset));
        }

        return $queryBuilder->getQuery()->getResult();
    }
}
