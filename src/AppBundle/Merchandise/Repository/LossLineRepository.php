<?php

namespace AppBundle\Merchandise\Repository;

use AppBundle\Merchandise\Entity\LossSheet;

/**
 * LossLinesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LossLineRepository extends \Doctrine\ORM\EntityRepository
{
    public function getlossbyDays($data)
    {

        $queryBuilder = $this->createQueryBuilder('l')
            ->join("l.lossSheet", "s")
            ->join("l.product", "p");

        $queryBuilder->andwhere("s.entryDate >= :date")
            ->setParameter("date", $data['date']);

        $queryBuilder->andwhere("s.entryDate <= :endDate")
            ->setParameter("endDate", $data['endDate']);

        $queryBuilder->andWhere("s.status = :set")
            ->setParameter("set", LossSheet::SET);

        $queryBuilder->select('SUM(l.totalLoss) AS total', '(p.id) AS productId', '(p.name) AS productName');
        $queryBuilder->groupBy('p');

        $result = $queryBuilder->getQuery()->getResult();

        return $result;
    }

    public function getFiltredLossLine($filter, $onlyTotal = false, $isFoodCost = false)
    {

        $conn = $this->_em->getConnection();
        $D1 = $filter['beginDate']." 00:00:00";
        $D2 = $filter['endDate']." 23:59:59";
        $article = LossSheet::ARTICLE;
        if (isset($filter['categories'])) {
            $categories = $filter['categories'];
        }

        $sql = "SELECT
                    P.id AS productId,
                    P.name AS productName,
                    SUM(LL.total_loss) AS total,
                    EXTRACT(DOW FROM LS.entry) as Entryday,
                    MAX(PP.label_unit_inventory) as unitInventory,
                    SUM(LL.total_revenue_price) as lossPrice

                    From public.loss_line LL
                    LEFT JOIN public.loss_sheet  LS on LS.id = LL.loss_sheet_id
                    LEFT JOIN public.product_purchased PP ON PP.id = LL.product_id
                    LEFT JOIN public.product P on P.id = PP.id
                    where LS.origin_restaurant_id = :origin_restaurant_id and P.active=true and LS.entry >= :D1 and LS.entry <= :D2 and LS.type = :article";
        if($isFoodCost)
        {
            $sql .= " and( PP.product_category_id is null or product_category_id in (select pc.id from product_categories pc join category_group cg on pc.category_group_id = cg.id where cg.is_food_cost = true))";
        }

        $sql .= " GROUP BY Entryday, P.id ORDER BY P.Name";

        if (isset($filter['productName']) && $filter['productName'] != '') {
            $pos_where = strpos($sql, 'and LS.type = :article');
            $sql = substr($sql, 0, $pos_where + 22)." AND lower(P.name) LIKE :productName ".substr(
                $sql,
                $pos_where + 22
            );
        }

        if (isset($filter['productCode']) && $filter['productCode'] != '') {
            $pos_where = strpos($sql, 'and LS.type = :article');
            $sql = substr($sql, 0, $pos_where + 22)." AND lower(PP.external_id) LIKE :productCode ".substr(
                $sql,
                $pos_where + 22
            );
        }

        if ($onlyTotal) {
            $sql = 'SELECT SUM( LossPrice ) as totalLoss	FROM ('.$sql.' ) as Result';
        }

        if (isset($filter['categories'])) {
            foreach ($categories as $key => $category_id) {
                $temp[] = ' PP.product_category_id = :id'.$key;
            }
            $pos_where = strpos($sql, 'and LS.type = :article');
            $sql = substr($sql, 0, $pos_where + 22)." and (".implode(' OR ', $temp)." )".substr($sql, $pos_where + 22);
        }

        // bind

        $restaurantId = $filter["currentRestaurantId"];
        $stm = $conn->prepare($sql);
        $stm->bindParam('D1', $D1);
        $stm->bindParam('D2', $D2);
        $stm->bindParam('origin_restaurant_id', $restaurantId);
        if (isset($filter['productName']) && $filter['productName'] != '') {
            $name = "%".strtolower($filter['productName'])."%";
            $stm->bindParam('productName', $name);
        }
        if (isset($filter['productCode']) && $filter['productCode'] != '') {
            $code = "%".strtolower($filter['productCode'])."%";
            $stm->bindParam('productCode', $code);
        }
        if (isset($filter['categories'])) {
            foreach ($categories as $key => $category_id) {
                $stm->bindValue('id'.$key, $category_id, \PDO::PARAM_INT);
            }
        }
        $stm->bindParam('article', $article);
        $stm->execute();
        if ($onlyTotal) {
            $data = $stm->fetchColumn();
        } else {
            $data = $stm->fetchAll();
        }

        return $data;
    }

    public function getFiltredLossLineSold($filter, $onlyTotal = false, $isFoodCost = false)
    {

        $conn = $this->_em->getConnection();
        $D1 = $filter['beginDate']." 00:00:00";
        $D2 = $filter['endDate']." 23:59:59";
        $final = LossSheet::FINALPRODUCT;

        $sql = "SELECT
            PS.id AS productId,
            MAX(P.name) AS productName,
            SUM(LL.total_loss) AS total,
            EXTRACT(DOW FROM LS.entry) as Entryday,
            SUM(LL.total_revenue_price) as lossPrice

            From public.loss_line LL
            LEFT JOIN public.loss_sheet  LS on LS.id = LL.loss_sheet_id
            LEFT JOIN public.product_sold PS ON PS.id = LL.product_id
            LEFT JOIN public.product_purchased PPS on PPS.id = PS.product_purchased_id
	    LEFT JOIN public.product P on P.id = PS.id
            where LS.origin_restaurant_id = :origin_restaurant_id and LS.entry >= :D1 and LS.entry <= :D2 and LS.type = :final";

        if($isFoodCost)
        {
            $sql .= " and( PPS.product_category_id is null or product_category_id in (select pc.id from product_categories pc join category_group cg on pc.category_group_id = cg.id where cg.is_food_cost = true))";
        }

        $sql .= " GROUP BY PS.id, Entryday ORDER BY productName";


        if (isset($filter['productName']) && $filter['productName'] != '') {
            $pos_where = strpos($sql, 'and LS.type = :final');
            $sql = substr($sql, 0, $pos_where + 20)." AND lower(P.name) LIKE :productName ".substr(
                $sql,
                $pos_where + 20
            );
        }

        if (isset($filter['productCode']) && $filter['productCode'] != '') {
            $pos_where = strpos($sql, 'and LS.type = :final');
            $sql = substr($sql, 0, $pos_where + 20)." AND lower(PS.code_plu) LIKE :productCode ".substr(
                $sql,
                $pos_where + 20
            );
        }

        if ($onlyTotal) {
            $sql = 'SELECT SUM ( lossPrice ) as lossValorization FROM ('.$sql.' ) AS global_result';
        }

        $restaurantId = $filter["currentRestaurantId"];
        $stm = $conn->prepare($sql);
        $stm->bindParam('D1', $D1);
        $stm->bindParam('D2', $D2);
        $stm->bindValue("origin_restaurant_id", $restaurantId);

        if (isset($filter['productName']) && $filter['productName'] != '') {
            $name = "%".strtolower($filter['productName'])."%";
            $stm->bindParam('productName', $name);
        }
        if (isset($filter['productCode']) && $filter['productCode'] != '') {
            $code = "%".strtolower($filter['productCode'])."%";
            $stm->bindParam('productCode', $code);
        }
        $stm->bindParam('final', $final);
        $stm->execute();
        if ($onlyTotal) {
            $data = $stm->fetch();
        } else {
            $data = $stm->fetchAll();
        }

        return $data;
    }

    /****************
     * Supervision Section
     ************************/

    public function getSupervisionFiltredLossLine($filter, $onlyTotal = false)
    {

        $conn = $this->_em->getConnection();
        $D1 = $filter['beginDate']." 00:00:00";
        $D2 = $filter['endDate']." 23:59:59";

        $article = LossSheet::ARTICLE;

        $sql = "SELECT
                    P.id AS productId,
                    P.name AS productName,
                    SUM(LL.total_loss) AS total,
                    EXTRACT(DOW FROM LS.entry) as Entryday,
                    MAX(PP.label_unit_inventory) as unitInventory,
                    SUM(LL.total_revenue_price) as lossPrice

                    From public.loss_line LL
                    LEFT JOIN public.loss_sheet  LS on LS.id = LL.loss_sheet_id
                    LEFT JOIN public.product_purchased PP ON PP.id = LL.product_id
                    LEFT JOIN public.product P on P.id = PP.id

                    where P.active=true and LS.entry >= :D1 and LS.entry <= :D2 and LS.type = :article GROUP BY Entryday, P.id ORDER BY P.Name";

        if (isset($filter['restaurants']) and count($filter['restaurants']) > 0) {
            $temp = array();
            foreach ($filter['restaurants'] as $key => $restaurant) {
                $temp[] = ' LS.origin_restaurant_id = :id'.$key;
            }
            $pos_where = strpos($sql, 'and LS.type = :article');
            $sql = substr($sql, 0, $pos_where + 22)." and (".implode(' OR ', $temp)." )".substr($sql, $pos_where + 22);
        }

        if ($onlyTotal) {
            $sql = 'SELECT COALESCE(SUM( LossPrice ), 0) as totalLoss	FROM ('.$sql.' ) as Result';
        }


        // bind

        $stm = $conn->prepare($sql);
        $stm->bindParam('D1', $D1);
        $stm->bindParam('D2', $D2);
        if (isset($filter['restaurants']) and count($filter['restaurants']) > 0) {
            foreach ($filter['restaurants'] as $key => $restaurant) {
                $stm->bindValue('id'.$key, $restaurant->getId(), \PDO::PARAM_INT);
            }
        }
        $stm->bindParam('article', $article);
        $stm->execute();
        if ($onlyTotal) {
            $data = $stm->fetchColumn();
        } else {
            $data = $stm->fetchAll();
        }

        return $data;
    }

    public function getSupervisionFiltredLossLineSold($filter, $onlyTotal = false)
    {

        $conn = $this->_em->getConnection();
        $D1 = $filter['beginDate']." 00:00:00";
        $D2 = $filter['endDate']." 23:59:59";
        $final = LossSheet::FINALPRODUCT;


        $sql = "SELECT
            PS.id AS productId,
            MAX(P.name) AS productName,
            SUM(LL.total_loss) AS total,
            EXTRACT(DOW FROM LS.entry) as Entryday,
            SUM(LL.total_revenue_price) as lossPrice

            From public.loss_line LL
            LEFT JOIN public.loss_sheet  LS on LS.id = LL.loss_sheet_id
            LEFT JOIN public.product_sold PS ON PS.id = LL.product_id
            LEFT JOIN public.product_purchased PPS on PPS.id = PS.product_purchased_id
	    LEFT JOIN public.product P on P.id = PS.id
            where LS.entry >= :D1 and LS.entry <= :D2 and LS.type = :final GROUP BY PS.id, Entryday ORDER BY productName
        ";


        if (isset($filter['restaurants']) and count($filter['restaurants']) > 0) {
            $temp = array();
            foreach ($filter['restaurants'] as $key => $restaurant) {
                $temp[] = ' LS.origin_restaurant_id = :id'.$key;
            }
            $pos_where = strpos($sql, 'and LS.type = :final');
            $sql = substr($sql, 0, $pos_where + 20)." and (".implode(' OR ', $temp)." )".substr($sql, $pos_where + 20);
        }

        if ($onlyTotal) {
            //            $sql = 'SELECT COALESCE(SUM ( price_transformed ),0) as totalTransfomed, COALESCE(SUM ( price_non_transformed ),0) as totalNonTransformed FROM (' . $sql . ' ) AS global_result';
            $sql = 'SELECT SUM ( lossPrice ) as lossValorization FROM ('.$sql.' ) AS global_result';
        }

        // bind

        $stm = $conn->prepare($sql);
        $stm->bindParam('D1', $D1);
        $stm->bindParam('D2', $D2);
        if (isset($filter['restaurants']) and count($filter['restaurants']) > 0) {
            foreach ($filter['restaurants'] as $key => $restaurant) {
                $stm->bindValue('id'.$key, $restaurant->getId(), \PDO::PARAM_INT);
            }
        }
        $stm->bindParam('final', $final);
        $stm->execute();
        if ($onlyTotal) {
            $data = $stm->fetch();
        } else {
            $data = $stm->fetchAll();
        }

        return $data;
    }
}
