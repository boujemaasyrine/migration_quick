<?php

namespace AppBundle\Staff\Repository;

use AppBundle\Financial\Entity\Ticket;
use AppBundle\Merchandise\Entity\Restaurant;
use AppBundle\Merchandise\Entity\SoldingCanal;
use AppBundle\Security\Entity\Role;
use AppBundle\Security\Entity\User;
use AppBundle\Staff\Entity\Employee;
use AppBundle\ToolBox\Utils\Utilities;
use AppBundle\Supervision\Utils\Utilities as SupervisionUtilities;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * EmployeeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmployeeRepository extends EntityRepository
    implements UserProviderInterface
{

    public function findCashierThatHaveARelatedTicketAtDate(
        \DateTime $dateTime,
        $query = false,
        $restaurant = null
    )
    {
        $cashier = null;
        $ticketOfAllDay = true;
        $tickets = $this->_em->getRepository('Financial:Ticket')
            ->getDayTicketsForCashier(
                $dateTime,
                $cashier,
                $ticketOfAllDay,
                $restaurant
            );
        $operatorWyndIds = [];
        foreach ($tickets as $ticket) {
            /**
             * @var Ticket $ticket
             */
            $operatorWyndIds[] = $ticket->getOperator();
        }
        $operatorWyndIds = array_unique($operatorWyndIds);
        $qb = $this->_em->getRepository('Staff:Employee')->createQueryBuilder(
            'employee'
        );
        $qb->select('employee')
            ->where('employee.wyndId IN (:operatorWyndIds)')
            ->setParameter('operatorWyndIds', $operatorWyndIds)
            ->andWhere(":restaurant Member of employee.eligibleRestaurants")
            ->setParameter("restaurant", $restaurant);

        if ($query) {
            return $qb;
        } else {
            $employees = $qb->getQuery()->getResult();
        }

        return $employees;
    }

    public function getStaffFiltredOrdered(
        $criteria,
        $order,
        $offset,
        $limit,
        $onlyList = false
    )
    {

        $roleAdmin = $this->_em->getRepository('Security:Role')->findOneBy(
            [
                'label' => Role::ROLE_ADMIN,
            ]
        );
        $roleSupervision = $this->_em->getRepository(Role::class)->findOneBy(
            array(
                'label' => Role::ROLE_SUPERVISION,
            )
        );

        $queryBuilder = $this->createQueryBuilder('s');
        $queryBuilder->where('s.deleted = :false')->orWhere('s.deleted IS null')
            ->setParameter('false', false);

        if ($roleAdmin) {
            $queryBuilder->andWhere(':roleAdmin NOT MEMBER OF s.employeeRoles')
                ->setParameter('roleAdmin', $roleAdmin);
        }

        if ($roleSupervision) {
            $queryBuilder->andWhere(
                ":roleSupervision NOT MEMBER OF s.employeeRoles"
            )
                ->setParameter("roleSupervision", $roleSupervision);
        }
        if (!$onlyList) {
            $qb1 = clone $queryBuilder;
            if (isset($criteria['restaurant'])) {
                $qb1->andWhere(":restaurant MEMBER OF s.eligibleRestaurants")
                    ->setParameter("restaurant", $criteria['restaurant']);
            }
            $total = $qb1->select('count(s)')
                ->getQuery()->getSingleScalarResult();
        }

        //filtering


        if ($criteria !== null && is_array($criteria) && count($criteria) > 0) {
            if (Utilities::exist($criteria, 'staff_search[firstName')) {
                $queryBuilder->andWhere("lower(s.firstName) LIKE :firstName ")
                    ->setParameter(
                        "firstName",
                        "%" . strtolower($criteria['staff_search[firstName']) . "%"
                    );
            }
            if (Utilities::exist($criteria, 'staff_search[lastName')) {
                $queryBuilder->andWhere("lower(s.lastName) LIKE :lastName ")
                    ->setParameter(
                        "lastName",
                        "%" . strtolower($criteria['staff_search[lastName']) . "%"
                    );
            }
            if (Utilities::exist($criteria, 'staff_search[role')) {
                $queryBuilder->leftJoin('s.employeeRoles', 'r');
                $queryBuilder->andWhere("r.id = :role")
                    ->setParameter("role", $criteria['staff_search[role']);
            }
            if (Utilities::exist($criteria, 'staff_search[keyword')) {
                $queryBuilder->andWhere(
                    "lower(s.firstName) LIKE :keyword OR lower(s.lastName) LIKE :keyword
                        OR lower(s.email) LIKE :keyword OR lower(s.socialId) LIKE :keyword OR lower(s.username) LIKE :keyword"
                )
                    ->setParameter(
                        "keyword",
                        "%" . strtolower($criteria['staff_search[keyword']) . "%"
                    );
            }
            if (isset($criteria['restaurant'])) {
                $queryBuilder->andWhere(
                    ":restaurant MEMBER OF s.eligibleRestaurants"
                )
                    ->setParameter("restaurant", $criteria['restaurant']);
            }
        }

        if (!$onlyList) {
            $qb2 = clone $queryBuilder;
            $filtredTotal = $qb2->select('count(s)')
                ->getQuery()->getSingleScalarResult();
        }

        // ordering
        if ($order !== null && is_array($order) && count($order) > 0) {
            if (Utilities::exist($order, 'col')) {
                if (Utilities::exist($order, 'dir')) {
                    $orderDir = $order['dir'];
                } else {
                    $orderDir = 'asc';
                }
                switch ($order['col']) {
                    case 'social':
                        $queryBuilder->orderBy('s.socialId', $orderDir);
                        break;
                    case 'firstName':
                        $queryBuilder->orderBy('s.firstName', $orderDir);
                        break;
                    case 'lastName':
                        $queryBuilder->orderBy('s.lastName', $orderDir);
                        break;
                    case 'email':
                        $queryBuilder->orderBy('s.email', $orderDir);
                        break;
                }
            }
        }


        if ($limit !== null) {
            $queryBuilder->setMaxResults(intval($limit));
        }

        if ($offset !== null) {
            $queryBuilder->setFirstResult(intval($offset));
        }

        if ($onlyList) {
            return $queryBuilder->getQuery()->getResult();
        } else {
            return array(
                'list' => $queryBuilder->getQuery()->getResult(),
                'total' => $total,
                'filtred' => $filtredTotal,
            );
        }
    }

    /**
     * This method is used to get an ordered list of supervision users filtered by a criteria
     *
     * @param  $criteria : the criteria used to filter the list of supervision users
     * @param  $order
     * @param  $offset : the offset from which begin the list of supervision users
     * @param  $limit : the limit number of the selected users
     *
     * @return array: the ordered list of the supervision users
     */
    public function getUsersOrdered($criteria, $order, $offset, $limit)
    {

        $queryBuilder = $this->createQueryBuilder('u');
        $queryBuilder->leftJoin('u.employeeRoles', 'r');

        $queryBuilder->andWhere('u.active = :true')
            ->andWhere('u.deleted != :true or u.deleted IS NULL')
            ->setParameter('true', true);

        $queryBuilder->andWhere('r.label != :roleAdmin')
            ->setParameter('roleAdmin', Role::ROLE_ADMIN);


        //filtering
        if ($criteria !== null && is_array($criteria) && count($criteria) > 0) {
            if (SupervisionUtilities::exist($criteria, 'usersSearch[keyword')) {
                $queryBuilder->andWhere(
                    "lower(u.lastName) LIKE :keyword OR lower(u.firstName) LIKE :keyword
                    OR lower(u.username) LIKE :keyword OR lower(u.email) LIKE :keyword
                    OR lower(r.textLabel) LIKE :keyword"
                )
                    ->setParameter(
                        "keyword",
                        "%" . strtolower($criteria['usersSearch[keyword']) . "%"
                    );
            }
        }

        if ($order !== null && is_array($order) && count($order) > 0) {
            if (SupervisionUtilities::exist($order, 'col')) {
                if (SupervisionUtilities::exist($order, 'dir')) {
                    $orderDir = $order['dir'];
                } else {
                    $orderDir = 'asc';
                }
                switch ($order['col']) {
                    case 'lastName':
                        $queryBuilder->orderBy('u.lastName', $orderDir);
                        break;
                    case 'firstName':
                        $queryBuilder->orderBy('u.firstName', $orderDir);
                        break;
                    case 'login':
                        $queryBuilder->orderBy('u.username', $orderDir);
                        break;
                    case 'email':
                        $queryBuilder->orderBy('u.email', $orderDir);
                        break;
                    case 'function':
                        $queryBuilder->orderBy('r.textLabel', $orderDir);
                        break;
                }
            }
        }
        if ($limit !== null) {
            $queryBuilder->setMaxResults(intval($limit));
        }

        if ($offset !== null) {
            $queryBuilder->setFirstResult(intval($offset));
        }

        return $queryBuilder->getQuery()->getResult();
    }


    public function getUsersByRole($role)
    {

        $queryBuilder = $this->createQueryBuilder('u');
        $queryBuilder->leftJoin('u.employeeRoles', 'r');

        $queryBuilder->where('r.label = :role')
            ->setParameter('role', $role);

        $result = $queryBuilder->getQuery()->getResult();

        return $result;
    }

    public function getAllExceptTheAuthenticated(
        $userId,
        Restaurant $restaurant
    )
    {

        $queryBuilder = $this->createQueryBuilder('u');
        $queryBuilder->leftJoin('u.employeeRoles', 'r');

        $queryBuilder->andWhere(":restaurant MEMBER OF u.eligibleRestaurants")
            ->setParameter("restaurant", $restaurant);
        $queryBuilder->andWhere('u.id != :userId')
            ->setParameter('userId', $userId);
        $queryBuilder->andWhere("r.type = :type")
            ->setParameter("type", Role::RESTAURANT_ROLE_TYPE);


        return $queryBuilder->getQuery()->getResult();
    }

    public function loadUserByUsername($username)
    {

        $username = strtolower($username);

        $user = $this->createQueryBuilder('e')
            ->where('LOWER(e.username) = :username')
            ->andWhere('e.deleted != :true or e.deleted IS NULL')
            ->setParameter('username', $username)
            ->setParameter('true', true)
            ->getQuery()->getOneOrNullResult();

        return $user;
    }

    /**
     * Refreshes the user for the account interface.
     *
     * It is up to the implementation to decide if the user data should be
     * totally reloaded (e.g. from the database), or if the UserInterface
     * object can just be merged into some internal array of users / identity
     * map.
     *
     * @param UserInterface $user
     *
     * @return UserInterface
     *
     * @throws UnsupportedUserException if the account is not supported
     */
    public function refreshUser(UserInterface $user)
    {
        return $this->loadUserByUsername($user->getUsername());
    }

    /**
     * Whether this provider supports the given user class.
     *
     * @param string $class
     *
     * @return bool
     */
    public function supportsClass($class)
    {
        if ($class == Employee::class || $class == User::class) {
            return true;
        }

        return false;
    }

    public function getShownUsers()
    {
        //supervision version

        $queryBuilder = $this->createQueryBuilder('u');
        $queryBuilder->leftJoin('u.employeeRoles', 'r');

        $queryBuilder->andWhere("r.type != :type")
            ->setParameter("type", Role::RESTAURANT_ROLE_TYPE);

        $queryBuilder->andWhere('u.active = :true')
            ->andWhere('u.deleted != :true or u.deleted IS NULL')
            ->setParameter('true', true);

        $queryBuilder->andWhere('r.label != :roleAdmin')
            ->setParameter('roleAdmin', Role::ROLE_ADMIN);

        return $queryBuilder->getQuery()->getResult();

        //new version
        /*$sql = "select e from AppBundle\Staff\Entity\Employee e where e in
                                                          (select em from AppBundle\Staff\Entity\Employee em join em.employeeRoles r where r.typ r.type = :centralType and r.type != :adminType)
                                                          and e not in (select emp from AppBundle\Staff\Entity\Employee emp join emp.employeeRoles ro where ro.type = :restaurantType)";
        $shownUsers = $this->getEntityManager()->createQuery($sql)
                                ->setParameters(array(
                                    "centralType" => Role::CENTRAL_ROLE_TYPE ,
                                    "restaurantType" => Role::RESTAURANT_ROLE_TYPE,
                                    "adminType" => Role::ROLE_ADMIN
                                ))->getResult();

        return $shownUsers;*/
    }

    public function getKioskCashiers(
        \DateTime $date,
        Restaurant $restaurant,
        $counted = false
    )
    {
//        $tickets = $this->getEntityManager()->getRepository(Ticket::class)
//            ->findBy(
//                array(
//                    'originRestaurant' => $restaurant,
//                    'origin' => SoldingCanal::KIOSK,
//                    'date' => $date->setTime(0, 0, 0),
//                    'counted' => $counted,
//                )
//            );

 $tickets = $this->getEntityManager()->getRepository(Ticket::class)->getKioskEorderingTickets($date,$restaurant,$counted);
        foreach ($tickets as $ticket) {
            $operatorWyndIds[] = $ticket->getOperator();
        }

        if (isset($operatorWyndIds)) {
            $operatorWyndIds = array_unique($operatorWyndIds);

            $qb = $this->getEntityManager()->getRepository(Employee::class)
                ->createQueryBuilder('employee');

            $qb->select('employee')
                ->where('employee.wyndId IN (:operatorWyndIds)')
                ->andWhere(':restaurant MEMBER OF employee.eligibleRestaurants')
                ->setParameter('operatorWyndIds', $operatorWyndIds)
                ->setParameter('restaurant', $restaurant);


            $employees = $qb->getQuery()->getResult();

            return $employees;


        }

        return null;
    }

    public function getRestaurantManager($restaurant)
    {
        $roleManager = $this->getEntityManager()->getRepository(Role::class)
            ->findOneBy(
                [
                    'textLabel' => "Manager",
                ]
            );
        $qb = $this->getEntityManager()->getRepository(Employee::class)
            ->createQueryBuilder('employee');
        $qb->where(':restaurant MEMBER OF employee.eligibleRestaurants')
            ->setParameter('restaurant', $restaurant)
            ->andWhere('employee.deleted != :true or employee.deleted IS NULL')
            ->setParameter('true', true)
            ->andWhere(':roleManager MEMBER OF employee.employeeRoles')
            ->setParameter('roleManager', $roleManager);

        $managers = $qb->getQuery()->getResult();

        return $managers;


    }


    public function getDeliveryCashiers($date, $restaurant, $counted = false)
    {
        $qb = $this->getEntityManager()->getRepository(Ticket::class)
            ->createQueryBuilder('t');

        $qb->select('distinct(t.operator)')
            ->where('t.originRestaurant=:restaurant')
            ->andWhere('t.destination=:destination')
            ->andWhere('t.date =:date')
            ->andWhere('t.counted=:counted')
            ->setParameter('restaurant', $restaurant)
            ->setParameter('date', $date->setTime(0, 0, 0))
            ->setParameter('counted', $counted);


        $operators = $qb->getQuery()->getArrayResult();


        if (isset($operators)) {


            $qb = $this->getEntityManager()->getRepository(Employee::class)
                ->createQueryBuilder('employee');

            $qb->select('employee')
                ->where('employee.wyndId IN (:operatorWyndIds)')
                ->andWhere(':restaurant MEMBER OF employee.eligibleRestaurants')
                ->setParameter('operatorWyndIds', $operators)
                ->setParameter('restaurant', $restaurant);


            $employees = $qb->getQuery()->getResult();

            return $employees;


        }

        return null;


        /*$tickets = $this->getEntityManager()->getRepository(Ticket::class)
            ->findBy(
                array(
                    'originRestaurant' => $restaurant,
                    'destination'           => SoldingCanal::DELIVERY,
                    'date'             => $date->setTime(0, 0, 0),
                    'counted'          => $counted,
                )
        );*/


    }


    public function getCoordinationMails()
    {
        $roleCoordination = $this->getEntityManager()->getRepository(
            Role::class
        )->findOneBy(array('label' => Role::ROLE_COORDINATION));

        $qb = $this->getEntityManager()->getRepository(Employee::class)
            ->createQueryBuilder('employee');


        $qb->select('employee.email')
            ->Where('employee.deleted != :true or employee.deleted IS NULL')
            ->setParameter('true', true)
            ->andWhere(':roleCoordination MEMBER OF employee.employeeRoles')
            ->setParameter('roleCoordination', $roleCoordination);


        $result = $qb->getQuery()->getScalarResult();
        $result = array_map('current', $result);

        return $result;
    }

    /**
     * retourne employé d'un restaurant
     * @param Restaurant $restaurant
     * @param $wyndID
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getRestaurantEmployeeByWyndID(Restaurant $restaurant, $wyndID)
    {
        $queryBuilder = $this->createQueryBuilder('e');

        $queryBuilder->where(':restaurant MEMBER OF e.eligibleRestaurants')
            ->andWhere('e.deleted != true or e.deleted IS NULL')
            ->andWhere('e.wyndId = :wyndID')
            ->setParameters(array('restaurant' => $restaurant,
                'wyndID' => $wyndID));
        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

}
